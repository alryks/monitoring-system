package notifications

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
	"time"

	"monitoring-system/core/server/internal/models"
)

// Service –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
type Service struct {
	settings *models.NotificationSettings
	client   *http.Client
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func New() *Service {
	return &Service{
		settings: &models.NotificationSettings{
			TelegramBotToken: "",
			TelegramChatID:   "",
			Notifications: models.NotificationConfigurations{
				AgentOffline: models.NotificationConfig{
					Enabled: false,
					Message: "üö® –ê–≥–µ–Ω—Ç {AGENT_NAME} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!",
				},
				ContainerStopped: models.NotificationConfig{
					Enabled: false,
					Message: "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {CONTAINER_NAME} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ –∞–≥–µ–Ω—Ç–µ {AGENT_NAME}",
				},
				CPUThreshold: models.CPUThresholdConfig{
					Enabled:   false,
					Threshold: 80,
					Message:   "üî• –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {AGENT_NAME} - {CPU_USAGE}%",
				},
				RAMThreshold: models.RAMThresholdConfig{
					Enabled:   false,
					Threshold: 80,
					Message:   "üíæ –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {AGENT_NAME} - {RAM_USAGE}%",
				},
			},
		},
		client: &http.Client{
			Timeout: 10 * time.Second,
		},
	}
}

// GetSettings –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func (s *Service) GetSettings() *models.NotificationSettings {
	return s.settings
}

// UpdateSettings –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func (s *Service) UpdateSettings(settings *models.NotificationSettings) {
	s.settings = settings
}

// SendTestNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
func (s *Service) SendTestNotification() error {
	if s.settings.TelegramBotToken == "" {
		return fmt.Errorf("telegram bot token not configured")
	}

	message := "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n\n–í—Ä–µ–º—è: " + time.Now().Format("2006-01-02 15:04:05")

	return s.sendTelegramMessage(message)
}

// CheckAgentOffline –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞
func (s *Service) CheckAgentOffline(agentName string) error {
	if !s.settings.Notifications.AgentOffline.Enabled {
		return nil
	}

	message := s.replaceVariables(s.settings.Notifications.AgentOffline.Message, map[string]string{
		"AGENT_NAME": agentName,
	})

	return s.sendTelegramMessage(message)
}

// CheckContainerStopped –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
func (s *Service) CheckContainerStopped(containerName, agentName string) error {
	if !s.settings.Notifications.ContainerStopped.Enabled {
		return nil
	}

	message := s.replaceVariables(s.settings.Notifications.ContainerStopped.Message, map[string]string{
		"CONTAINER_NAME": containerName,
		"AGENT_NAME":     agentName,
	})

	return s.sendTelegramMessage(message)
}

// CheckCPUThreshold –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ CPU
func (s *Service) CheckCPUThreshold(agentName string, cpuUsage float64) error {
	if !s.settings.Notifications.CPUThreshold.Enabled {
		return nil
	}

	if cpuUsage > float64(s.settings.Notifications.CPUThreshold.Threshold) {
		message := s.replaceVariables(s.settings.Notifications.CPUThreshold.Message, map[string]string{
			"AGENT_NAME": agentName,
			"CPU_USAGE":  fmt.Sprintf("%.1f", cpuUsage),
		})

		return s.sendTelegramMessage(message)
	}

	return nil
}

// CheckRAMThreshold –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ RAM
func (s *Service) CheckRAMThreshold(agentName string, ramUsage float64) error {
	if !s.settings.Notifications.RAMThreshold.Enabled {
		return nil
	}

	if ramUsage > float64(s.settings.Notifications.RAMThreshold.Threshold) {
		message := s.replaceVariables(s.settings.Notifications.RAMThreshold.Message, map[string]string{
			"AGENT_NAME": agentName,
			"RAM_USAGE":  fmt.Sprintf("%.1f", ramUsage),
		})

		return s.sendTelegramMessage(message)
	}

	return nil
}

// sendTelegramMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
func (s *Service) sendTelegramMessage(text string) error {
	if s.settings.TelegramBotToken == "" {
		return fmt.Errorf("telegram bot token not configured")
	}

	if s.settings.TelegramChatID == "" {
		return fmt.Errorf("telegram chat ID not configured")
	}

	message := models.TelegramMessage{
		ChatID:    s.settings.TelegramChatID,
		Text:      text,
		ParseMode: "HTML",
	}

	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("error marshaling message: %v", err)
	}

	url := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", s.settings.TelegramBotToken)

	resp, err := s.client.Post(url, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("error sending telegram message: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("telegram API returned status: %d, body: %s", resp.StatusCode, string(body))
	}

	log.Printf("Telegram notification sent successfully")
	return nil
}

// replaceVariables –∑–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
func (s *Service) replaceVariables(message string, variables map[string]string) string {
	result := message
	for key, value := range variables {
		result = strings.ReplaceAll(result, "{"+key+"}", value)
	}
	return result
}

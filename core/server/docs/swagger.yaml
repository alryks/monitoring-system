basePath: /api
definitions:
  models.Action:
    properties:
      agent_id:
        type: string
      completed:
        type: string
      created:
        type: string
      error:
        type: string
      id:
        type: string
      payload:
        additionalProperties: true
        type: object
      response:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  models.ActionListResponse:
    properties:
      actions:
        items:
          $ref: '#/definitions/models.Action'
        type: array
      total:
        type: integer
    type: object
  models.ActionResponse:
    properties:
      error:
        type: string
      id:
        type: string
      response:
        type: string
      status:
        type: string
    type: object
  models.Agent:
    properties:
      created:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      last_ping:
        type: string
      name:
        type: string
      public_ip:
        type: string
      status:
        description: online, offline, unknown
        type: string
      token:
        type: string
    type: object
  models.AgentData:
    properties:
      docker:
        $ref: '#/definitions/models.DockerInfo'
      metrics:
        $ref: '#/definitions/models.Metrics'
    type: object
  models.AgentDetail:
    properties:
      containers:
        items:
          $ref: '#/definitions/models.ContainerDetail'
        type: array
      created:
        type: string
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/models.ImageDetail'
        type: array
      is_active:
        type: boolean
      last_ping:
        type: string
      metrics:
        $ref: '#/definitions/models.AgentMetrics'
      name:
        type: string
      public_ip:
        type: string
      status:
        description: online, offline, unknown
        type: string
      system_metrics:
        items:
          $ref: '#/definitions/models.SystemMetric'
        type: array
      token:
        type: string
    type: object
  models.AgentMetrics:
    properties:
      cpu:
        items:
          $ref: '#/definitions/models.CPUMetricCurrent'
        type: array
      disk:
        items:
          $ref: '#/definitions/models.DiskMetricCurrent'
        type: array
      memory:
        $ref: '#/definitions/models.MemoryMetricCurrent'
      network:
        $ref: '#/definitions/models.NetworkMetricCurrent'
    type: object
  models.AgentNginxConfig:
    properties:
      agent_id:
        type: string
      domains:
        items:
          $ref: '#/definitions/models.NginxConfig'
        type: array
    type: object
  models.CPUInfo:
    properties:
      name:
        type: string
      usage:
        type: number
    type: object
  models.CPUMetricCurrent:
    properties:
      name:
        type: string
      usage:
        type: number
    type: object
  models.CPUThresholdConfig:
    properties:
      enabled:
        type: boolean
      message:
        type: string
      threshold:
        type: integer
    type: object
  models.Container:
    properties:
      agent_id:
        description: Дополнительные поля для совместимости с frontend
        type: string
      agent_name:
        type: string
      container_id:
        type: string
      cpu_usage_percent:
        type: number
      created_at:
        type: string
      id:
        type: string
      image_id:
        type: string
      ip_address:
        type: string
      mac_address:
        type: string
      memory_usage_mb:
        type: integer
      name:
        type: string
      network_received_bytes:
        type: integer
      network_sent_bytes:
        type: integer
      ping_id:
        type: string
      restart_count:
        type: integer
      status:
        type: string
    type: object
  models.ContainerDetail:
    properties:
      agent:
        $ref: '#/definitions/models.Agent'
      agent_id:
        description: Дополнительные поля для совместимости с frontend
        type: string
      agent_name:
        type: string
      container_id:
        type: string
      cpu_usage_percent:
        type: number
      created_at:
        type: string
      history:
        items:
          $ref: '#/definitions/models.ContainerMetric'
        type: array
      id:
        type: string
      image_id:
        type: string
      ip_address:
        type: string
      logs:
        items:
          $ref: '#/definitions/models.ContainerLog'
        type: array
      mac_address:
        type: string
      memory_usage_mb:
        type: integer
      name:
        type: string
      network_received_bytes:
        type: integer
      network_sent_bytes:
        type: integer
      ping_id:
        type: string
      restart_count:
        type: integer
      status:
        type: string
    type: object
  models.ContainerInfo:
    properties:
      cpu:
        type: number
      created:
        type: string
      id:
        type: string
      image:
        type: string
      ip:
        type: string
      logs:
        items:
          type: string
        type: array
      mac:
        type: string
      memory:
        type: integer
      name:
        type: string
      network:
        $ref: '#/definitions/models.ContainerNetworkInfo'
      restart_count:
        type: integer
      status:
        type: string
    type: object
  models.ContainerListResponse:
    properties:
      containers:
        items:
          $ref: '#/definitions/models.ContainerDetail'
        type: array
      total:
        type: integer
    type: object
  models.ContainerLog:
    properties:
      container_id:
        type: string
      id:
        type: string
      log_line:
        type: string
      timestamp:
        type: string
    type: object
  models.ContainerMetric:
    properties:
      cpu_usage:
        type: number
      memory_usage:
        type: integer
      timestamp:
        type: string
    type: object
  models.ContainerNetworkInfo:
    properties:
      received:
        type: integer
      sent:
        type: integer
    type: object
  models.CreateActionRequest:
    properties:
      agent_id:
        type: string
      payload:
        additionalProperties: true
        type: object
      type:
        type: string
    type: object
  models.CreateAgentRequest:
    description: Запрос на создание нового агента мониторинга
    properties:
      name:
        example: Production Server 1
        type: string
    type: object
  models.CreateDomainRequest:
    properties:
      agent_id:
        type: string
      name:
        example: dashboard.domain.net
        type: string
      ssl_enabled:
        example: false
        type: boolean
    type: object
  models.CreateDomainRouteRequest:
    properties:
      container_name:
        example: my-container
        type: string
      domain_id:
        type: string
      path:
        example: /api
        type: string
      port:
        example: "3000"
        type: string
    type: object
  models.DashboardData:
    properties:
      agents:
        items:
          $ref: '#/definitions/models.Agent'
        type: array
      offline_agents:
        type: integer
      online_agents:
        type: integer
      recent_metrics:
        items:
          $ref: '#/definitions/models.RecentMetric'
        type: array
      system_overview:
        $ref: '#/definitions/models.SystemOverview'
      total_agents:
        type: integer
    type: object
  models.DiskInfo:
    properties:
      name:
        type: string
      read_bytes:
        type: integer
      reads:
        type: integer
      write_bytes:
        type: integer
      writes:
        type: integer
    type: object
  models.DiskMetricCurrent:
    properties:
      name:
        type: string
      read_bytes:
        type: integer
      read_speed:
        type: integer
      write_bytes:
        type: integer
      write_speed:
        type: integer
    type: object
  models.DockerInfo:
    properties:
      containers:
        items:
          $ref: '#/definitions/models.ContainerInfo'
        type: array
      images:
        items:
          $ref: '#/definitions/models.ImageInfo'
        type: array
    type: object
  models.Domain:
    properties:
      agent_id:
        description: ID агента, на котором размещен домен
        type: string
      agent_ip:
        description: IP адрес агента
        type: string
      agent_name:
        description: Дополнительные поля для совместимости с frontend
        type: string
      created:
        type: string
      id:
        type: string
      is_active:
        description: активен ли домен
        type: boolean
      name:
        description: 'например: "dashboard.domain.net"'
        type: string
      ssl_enabled:
        description: включен ли SSL
        type: boolean
      updated:
        type: string
    type: object
  models.DomainDetail:
    properties:
      agent:
        $ref: '#/definitions/models.Agent'
      agent_id:
        description: ID агента, на котором размещен домен
        type: string
      agent_ip:
        description: IP адрес агента
        type: string
      agent_name:
        description: Дополнительные поля для совместимости с frontend
        type: string
      created:
        type: string
      id:
        type: string
      is_active:
        description: активен ли домен
        type: boolean
      name:
        description: 'например: "dashboard.domain.net"'
        type: string
      routes:
        items:
          $ref: '#/definitions/models.DomainRoute'
        type: array
      ssl_enabled:
        description: включен ли SSL
        type: boolean
      updated:
        type: string
    type: object
  models.DomainListResponse:
    properties:
      domains:
        items:
          $ref: '#/definitions/models.DomainDetail'
        type: array
      total:
        type: integer
    type: object
  models.DomainRoute:
    properties:
      container_name:
        description: имя контейнера
        type: string
      created:
        type: string
      domain_id:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      path:
        description: путь (опционально, для /api/*)
        type: string
      port:
        description: порт контейнера
        type: string
      updated:
        type: string
    type: object
  models.DomainRouteListResponse:
    properties:
      routes:
        items:
          $ref: '#/definitions/models.DomainRoute'
        type: array
      total:
        type: integer
    type: object
  models.DomainStatus:
    properties:
      agent_id:
        type: string
      agent_ip:
        type: string
      agent_name:
        type: string
      domain_id:
        type: string
      domain_name:
        type: string
      is_active:
        type: boolean
      routes:
        items:
          $ref: '#/definitions/models.RouteStatus'
        type: array
      ssl_enabled:
        type: boolean
    type: object
  models.ImageDetail:
    properties:
      agent:
        $ref: '#/definitions/models.Agent'
      architecture:
        type: string
      created:
        type: string
      id:
        type: string
      image_id:
        type: string
      ping_id:
        type: string
      size:
        type: integer
      tags:
        items:
          type: string
        type: array
    type: object
  models.ImageInfo:
    properties:
      architecture:
        type: string
      created:
        type: string
      id:
        type: string
      size:
        type: integer
      tags:
        items:
          type: string
        type: array
    type: object
  models.ImageListResponse:
    properties:
      images:
        items:
          $ref: '#/definitions/models.ImageDetail'
        type: array
      total:
        type: integer
    type: object
  models.LoginRequest:
    description: Запрос на аутентификацию пользователя
    properties:
      password:
        example: admin123
        type: string
      username:
        example: admin
        type: string
    type: object
  models.LoginResponse:
    description: Ответ с JWT токеном и информацией о пользователе
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.MemoryInfo:
    properties:
      ram:
        $ref: '#/definitions/models.RAMInfo'
      swap:
        $ref: '#/definitions/models.SwapInfo'
    type: object
  models.MemoryMetricCurrent:
    properties:
      ram_percent:
        type: number
      ram_total:
        type: integer
      ram_usage:
        type: integer
      swap_percent:
        type: number
      swap_total:
        type: integer
      swap_usage:
        type: integer
    type: object
  models.Metrics:
    properties:
      cpu:
        items:
          $ref: '#/definitions/models.CPUInfo'
        type: array
      disk:
        items:
          $ref: '#/definitions/models.DiskInfo'
        type: array
      memory:
        $ref: '#/definitions/models.MemoryInfo'
      network:
        $ref: '#/definitions/models.NetworkInfo'
    type: object
  models.NetworkInfo:
    properties:
      public_ip:
        type: string
      received:
        type: integer
      sent:
        type: integer
    type: object
  models.NetworkMetricCurrent:
    properties:
      public_ip:
        type: string
      received_bytes:
        type: integer
      received_speed:
        type: integer
      sent_bytes:
        type: integer
      sent_speed:
        type: integer
    type: object
  models.NginxConfig:
    properties:
      agent_ip:
        type: string
      domain:
        type: string
      routes:
        items:
          $ref: '#/definitions/models.NginxRoute'
        type: array
      ssl_cert:
        $ref: '#/definitions/models.SSLCertificate'
      ssl_enabled:
        type: boolean
    type: object
  models.NginxRoute:
    properties:
      container_name:
        description: имя контейнера
        type: string
      path:
        description: 'например: "/" или "/api"'
        type: string
      port:
        description: порт контейнера
        type: string
    type: object
  models.NotificationConfig:
    properties:
      enabled:
        type: boolean
      message:
        type: string
    type: object
  models.NotificationConfigurations:
    properties:
      agent_offline:
        $ref: '#/definitions/models.NotificationConfig'
      container_stopped:
        $ref: '#/definitions/models.NotificationConfig'
      cpu_threshold:
        $ref: '#/definitions/models.CPUThresholdConfig'
      ram_threshold:
        $ref: '#/definitions/models.RAMThresholdConfig'
    type: object
  models.NotificationSettings:
    properties:
      notifications:
        $ref: '#/definitions/models.NotificationConfigurations'
      telegram_bot_token:
        type: string
      telegram_chat_id:
        type: string
    type: object
  models.RAMInfo:
    properties:
      total:
        type: integer
      usage:
        type: integer
    type: object
  models.RAMThresholdConfig:
    properties:
      enabled:
        type: boolean
      message:
        type: string
      threshold:
        type: integer
    type: object
  models.RecentMetric:
    properties:
      agent_id:
        type: string
      agent_name:
        type: string
      cpu_usage:
        type: number
      public_ip:
        type: string
      ram_usage:
        type: number
      timestamp:
        type: string
    type: object
  models.RouteStatus:
    properties:
      container_name:
        type: string
      container_status:
        description: running, stopped, etc.
        type: string
      is_active:
        type: boolean
      path:
        type: string
      port:
        type: string
      route_id:
        type: string
    type: object
  models.SSLCertificate:
    properties:
      private_key:
        type: string
      public_key:
        type: string
    type: object
  models.SwapInfo:
    properties:
      total:
        type: integer
      usage:
        type: integer
    type: object
  models.SystemMetric:
    properties:
      cpu_usage:
        type: number
      disk_read:
        type: integer
      disk_write:
        type: integer
      network_received:
        type: integer
      network_sent:
        type: integer
      public_ip:
        type: string
      ram_usage:
        type: number
      timestamp:
        type: string
    type: object
  models.SystemOverview:
    properties:
      running_containers:
        type: integer
      total_containers:
        type: integer
      total_cpu_cores:
        type: integer
      total_ram_mb:
        type: integer
    type: object
  models.UpdateDomainRequest:
    properties:
      agent_id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      ssl_enabled:
        type: boolean
    type: object
  models.UpdateDomainRouteRequest:
    properties:
      container_name:
        type: string
      is_active:
        type: boolean
      path:
        type: string
      port:
        type: string
    type: object
  models.User:
    properties:
      created:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      last_login:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API для системы мониторинга Docker контейнеров
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Docker Monitoring System API
  version: "1.0"
paths:
  /actions:
    get:
      description: Получает список действий с фильтрацией
      parameters:
      - description: ID агента
        in: query
        name: agent_id
        type: string
      - description: Статус действия
        in: query
        name: status
        type: string
      - description: Тип действия
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список действий
          schema:
            $ref: '#/definitions/models.ActionListResponse'
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Получение списка действий
      tags:
      - actions
    post:
      consumes:
      - application/json
      description: Создает новое действие для выполнения агентом
      parameters:
      - description: Данные действия
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateActionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Действие создано
          schema:
            $ref: '#/definitions/models.Action'
        "400":
          description: Неверные данные
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Создание действия
      tags:
      - actions
  /actions/{id}/status:
    put:
      consumes:
      - application/json
      description: Обновляет статус действия и сохраняет ответ от агента
      parameters:
      - description: ID действия
        in: path
        name: id
        required: true
        type: string
      - description: Bearer токен агента
        in: header
        name: Authorization
        required: true
        type: string
      - description: Ответ агента
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ActionResponse'
      produces:
      - application/json
      responses:
        "200":
          description: Действие обновлено
          schema:
            $ref: '#/definitions/models.Action'
        "400":
          description: Неверные данные
          schema:
            type: string
        "401":
          description: Неверный токен агента
          schema:
            type: string
        "404":
          description: Действие не найдено
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Обновление статуса действия
      tags:
      - actions
  /agent/ping:
    post:
      consumes:
      - application/json
      description: Получает данные мониторинга от агента и сохраняет их в базе данных,
        возвращает список невыполненных действий
      parameters:
      - description: Bearer токен агента
        in: header
        name: Authorization
        required: true
        type: string
      - description: Данные мониторинга от агента
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AgentData'
      produces:
      - application/json
      responses:
        "200":
          description: Список невыполненных действий
          schema:
            items:
              $ref: '#/definitions/models.Action'
            type: array
        "400":
          description: Неверные данные
          schema:
            type: string
        "401":
          description: Неверный токен агента
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Пинг от агента
      tags:
      - agent-data
  /agents:
    get:
      description: Возвращает список всех активных агентов
      produces:
      - application/json
      responses:
        "200":
          description: Список агентов
          schema:
            items:
              $ref: '#/definitions/models.Agent'
            type: array
        "401":
          description: Не авторизован
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить список агентов
      tags:
      - agents
    post:
      consumes:
      - application/json
      description: Создает нового агента мониторинга и возвращает токен для подключения
      parameters:
      - description: Данные для создания агента
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateAgentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Созданный агент
          schema:
            $ref: '#/definitions/models.Agent'
        "400":
          description: Неверные данные
          schema:
            type: string
        "401":
          description: Не авторизован
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Создать нового агента
      tags:
      - agents
  /agents/{id}:
    delete:
      description: Удаляет агента из системы мониторинга
      parameters:
      - description: ID агента
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Агент успешно удален
          schema:
            type: string
        "400":
          description: Неверный ID
          schema:
            type: string
        "401":
          description: Не авторизован
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Удалить агента
      tags:
      - agents
    get:
      description: Возвращает полную информацию об агенте включая метрики, контейнеры,
        образы и т.д.
      parameters:
      - description: ID агента
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Детальная информация об агенте
          schema:
            $ref: '#/definitions/models.AgentDetail'
        "400":
          description: Неверный ID
          schema:
            type: string
        "401":
          description: Не авторизован
          schema:
            type: string
        "404":
          description: Агент не найден
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить детальную информацию об агенте
      tags:
      - agents
    put:
      consumes:
      - application/json
      description: Обновляет имя и статус активности агента
      parameters:
      - description: ID агента
        in: path
        name: id
        required: true
        type: string
      - description: Поля для обновления
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Агент успешно обновлен
          schema:
            type: string
        "400":
          description: Неверные данные
          schema:
            type: string
        "401":
          description: Не авторизован
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Обновить агента
      tags:
      - agents
  /agents/{id}/containers:
    get:
      description: Возвращает список контейнеров на конкретном агенте
      parameters:
      - description: ID агента
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список контейнеров агента
          schema:
            items:
              $ref: '#/definitions/models.Container'
            type: array
        "400":
          description: Неверный ID
          schema:
            type: string
        "401":
          description: Не авторизован
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить контейнеры агента
      tags:
      - agents
  /agents/{id}/metrics:
    get:
      description: Возвращает историю метрик агента (CPU, память, сеть)
      parameters:
      - description: ID агента
        in: path
        name: id
        required: true
        type: string
      - description: Лимит записей (по умолчанию 50)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: История метрик агента
          schema:
            items:
              type: object
            type: array
        "400":
          description: Неверный ID
          schema:
            type: string
        "401":
          description: Не авторизован
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить метрики агента
      tags:
      - agents
  /api/agents/{agent_id}/nginx-config:
    get:
      description: Возвращает конфигурацию nginx для указанного агента
      parameters:
      - description: ID агента
        in: path
        name: agent_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AgentNginxConfig'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Получить конфигурацию nginx агента
      tags:
      - nginx
  /api/domains:
    get:
      description: Возвращает список всех доменов с их маршрутами
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DomainListResponse'
        "500":
          description: Internal Server Error
      summary: Получить список доменов
      tags:
      - domains
    post:
      consumes:
      - application/json
      description: Создает новый домен с указанным агентом
      parameters:
      - description: Данные домена
        in: body
        name: domain
        required: true
        schema:
          $ref: '#/definitions/models.CreateDomainRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Domain'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Создать новый домен
      tags:
      - domains
  /api/domains/{domain_id}/routes:
    get:
      description: Возвращает все маршруты для указанного домена
      parameters:
      - description: ID домена
        in: path
        name: domain_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DomainRouteListResponse'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Получить маршруты домена
      tags:
      - domain-routes
  /api/domains/{id}:
    delete:
      description: Удаляет домен и все его маршруты
      parameters:
      - description: ID домена
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Удалить домен
      tags:
      - domains
    get:
      description: Возвращает детальную информацию о домене
      parameters:
      - description: ID домена
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DomainDetail'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Получить домен по ID
      tags:
      - domains
    put:
      consumes:
      - application/json
      description: Обновляет информацию о домене
      parameters:
      - description: ID домена
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления
        in: body
        name: domain
        required: true
        schema:
          $ref: '#/definitions/models.UpdateDomainRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Domain'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Обновить домен
      tags:
      - domains
  /api/domains/{id}/status:
    get:
      description: Возвращает статус домена с информацией о контейнерах
      parameters:
      - description: ID домена
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DomainStatus'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Получить статус домена
      tags:
      - domains
  /api/domains/routes:
    post:
      consumes:
      - application/json
      description: Создает новый маршрут для домена
      parameters:
      - description: Данные маршрута
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/models.CreateDomainRouteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.DomainRoute'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Создать маршрут домена
      tags:
      - domain-routes
  /api/domains/routes/{id}:
    delete:
      description: Удаляет маршрут домена
      parameters:
      - description: ID маршрута
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Удалить маршрут домена
      tags:
      - domain-routes
    put:
      consumes:
      - application/json
      description: Обновляет информацию о маршруте домена
      parameters:
      - description: ID маршрута
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/models.UpdateDomainRouteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DomainRoute'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Обновить маршрут домена
      tags:
      - domain-routes
  /containers:
    get:
      description: Возвращает список всех контейнеров с фильтрацией
      parameters:
      - description: ID агента для фильтрации
        in: query
        name: agent_id
        type: string
      - description: Статус для фильтрации
        in: query
        name: status
        type: string
      - description: Поиск по имени или образу
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список контейнеров
          schema:
            $ref: '#/definitions/models.ContainerListResponse'
        "401":
          description: Не авторизован
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить список контейнеров
      tags:
      - containers
  /containers/{id}:
    get:
      description: Возвращает полную информацию о контейнере включая метрики и историю
      parameters:
      - description: ID контейнера
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Детальная информация о контейнере
          schema:
            $ref: '#/definitions/models.ContainerDetail'
        "400":
          description: Неверный ID
          schema:
            type: string
        "401":
          description: Не авторизован
          schema:
            type: string
        "404":
          description: Контейнер не найден
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить детальную информацию о контейнере
      tags:
      - containers
  /containers/{id}/logs:
    get:
      description: Возвращает последние логи контейнера (до 100 записей)
      parameters:
      - description: ID контейнера
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Логи контейнера
          schema:
            items:
              $ref: '#/definitions/models.ContainerLog'
            type: array
        "400":
          description: Неверный ID
          schema:
            type: string
        "401":
          description: Не авторизован
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить логи контейнера
      tags:
      - containers
  /dashboard:
    get:
      description: Возвращает KPI метрики, графики использования ресурсов и топ контейнеры
      produces:
      - application/json
      responses:
        "200":
          description: Данные дашборда
          schema:
            $ref: '#/definitions/models.DashboardData'
        "401":
          description: Не авторизован
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить данные дашборда
      tags:
      - dashboard
  /images:
    get:
      description: Возвращает список всех Docker образов с фильтрацией
      parameters:
      - description: ID агента для фильтрации
        in: query
        name: agent_id
        type: string
      - description: Поиск по ID образа или тегу
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список образов
          schema:
            $ref: '#/definitions/models.ImageListResponse'
        "401":
          description: Не авторизован
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить список Docker образов
      tags:
      - images
  /login:
    post:
      consumes:
      - application/json
      description: Выполняет вход в систему и возвращает JWT токен
      parameters:
      - description: Данные для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная аутентификация
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Неверный JSON
          schema:
            type: string
        "401":
          description: Неверные учетные данные
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Аутентификация пользователя
      tags:
      - auth
  /notifications/settings:
    get:
      description: Получает текущие настройки уведомлений
      produces:
      - application/json
      responses:
        "200":
          description: Настройки уведомлений
          schema:
            $ref: '#/definitions/models.NotificationSettings'
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Получение настроек уведомлений
      tags:
      - notifications
    post:
      consumes:
      - application/json
      description: Обновляет настройки уведомлений
      parameters:
      - description: Настройки уведомлений
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.NotificationSettings'
      produces:
      - application/json
      responses:
        "200":
          description: Настройки обновлены
          schema:
            $ref: '#/definitions/models.NotificationSettings'
        "400":
          description: Неверные данные
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Обновление настроек уведомлений
      tags:
      - notifications
  /notifications/test:
    post:
      description: Отправляет тестовое уведомление в Telegram
      produces:
      - application/json
      responses:
        "200":
          description: Уведомление отправлено
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Не настроен токен бота
          schema:
            type: string
        "500":
          description: Ошибка отправки
          schema:
            type: string
      summary: Отправка тестового уведомления
      tags:
      - notifications
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

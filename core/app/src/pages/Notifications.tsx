import { useState, useEffect } from 'react'
import { Bell, Bot, AlertTriangle, Cpu, HardDrive, Server, Container, Mail } from 'lucide-react'
import { notificationsApi, type NotificationSettings } from '../services/api'

export default function Notifications() {
  const [settings, setSettings] = useState<NotificationSettings>({
    telegram_bot_token: '',
    telegram_chat_id: '',
    email_settings: {
      enabled: false,
      smtp_host: '',
      smtp_port: 587,
      username: '',
      password: '',
      from_email: '',
      from_name: '–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
      to_emails: '',
      use_tls: true,
      use_start_tls: true
    },
    notifications: {
      agent_offline: {
        enabled: false,
        message: 'üö® –ê–≥–µ–Ω—Ç {AGENT_NAME} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!'
      },
      container_stopped: {
        enabled: false,
        message: '‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {CONTAINER_NAME} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ –∞–≥–µ–Ω—Ç–µ {AGENT_NAME}'
      },
      cpu_threshold: {
        enabled: false,
        threshold: 80,
        message: 'üî• –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {AGENT_NAME} - {CPU_USAGE}%'
      },
      ram_threshold: {
        enabled: false,
        threshold: 80,
        message: 'üíæ –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {AGENT_NAME} - {RAM_USAGE}%'
      }
    }
  })

  const [isLoading, setIsLoading] = useState(false)
  const [message, setMessage] = useState('')

  useEffect(() => {
    loadSettings()
  }, [])

  const loadSettings = async () => {
    try {
      setIsLoading(true)
      const response = await notificationsApi.getSettings()
      if (response.data) {
        setSettings(response.data)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error)
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    } finally {
      setIsLoading(false)
    }
  }

  const saveSettings = async () => {
    try {
      setIsLoading(true)
      await notificationsApi.updateSettings(settings)
      setMessage('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
      setTimeout(() => setMessage(''), 3000)
    } catch (error) {
      setMessage('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫')
      setTimeout(() => setMessage(''), 3000)
    } finally {
      setIsLoading(false)
    }
  }

  const testNotification = async () => {
    try {
      await notificationsApi.sendTest()
      setMessage('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
      setTimeout(() => setMessage(''), 3000)
    } catch (error) {
      setMessage('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
      setTimeout(() => setMessage(''), 3000)
    }
  }

  const updateNotification = (type: keyof NotificationSettings['notifications'], field: string, value: any) => {
    setSettings(prev => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ notifications —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!prev.notifications) {
        return prev
      }
      
      return {
        ...prev,
        notifications: {
          ...prev.notifications,
          [type]: {
            ...prev.notifications[type],
            [field]: value
          }
        }
      }
    })
  }

  return (
    <div style={{ padding: '2rem' }}>
      <div style={{ marginBottom: '2rem' }}>
        <h1 style={{ fontSize: '2rem', fontWeight: 'bold', marginBottom: '1rem', display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
          <Bell style={{ color: '#3b82f6' }} />
          –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        </h1>
        <p style={{ color: '#6b7280' }}>
          –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ –∏ email
        </p>
      </div>

      {message && (
        <div style={{
          padding: '1rem',
          marginBottom: '1rem',
          borderRadius: '0.5rem',
          backgroundColor: message.includes('–û—à–∏–±–∫–∞') ? '#fef2f2' : '#f0fdf4',
          color: message.includes('–û—à–∏–±–∫–∞') ? '#dc2626' : '#16a34a',
          border: `1px solid ${message.includes('–û—à–∏–±–∫–∞') ? '#fecaca' : '#bbf7d0'}`
        }}>
          {message}
        </div>
      )}

      {/* Telegram Bot Settings */}
      <div style={{ backgroundColor: 'white', padding: '2rem', borderRadius: '0.5rem', border: '1px solid #e5e7eb', marginBottom: '1rem' }}>
        <h2 style={{ marginBottom: '1rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
          <Bot size={20} />
          Telegram Bot
        </h2>
        <div style={{ marginBottom: '1rem' }}>
          <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
            –¢–æ–∫–µ–Ω –±–æ—Ç–∞:
          </label>
          <input
            type="text"
            value={settings.telegram_bot_token}
            onChange={(e) => setSettings(prev => ({ ...prev, telegram_bot_token: e.target.value }))}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞"
            style={{
              width: '100%',
              padding: '0.75rem',
              border: '1px solid #d1d5db',
              borderRadius: '0.375rem',
              fontSize: '0.875rem'
            }}
          />
        </div>
        <div style={{ marginBottom: '1rem' }}>
          <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
            Chat ID:
          </label>
          <input
            type="text"
            value={settings.telegram_chat_id}
            onChange={(e) => setSettings(prev => ({ ...prev, telegram_chat_id: e.target.value }))}
            placeholder="–í–≤–µ–¥–∏—Ç–µ Chat ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)"
            style={{
              width: '100%',
              padding: '0.75rem',
              border: '1px solid #d1d5db',
              borderRadius: '0.375rem',
              fontSize: '0.875rem'
            }}
          />
          <p style={{ fontSize: '0.75rem', color: '#6b7280', marginTop: '0.5rem' }}>
            Chat ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä–∏–≤: https://api.telegram.org/botYOUR_TOKEN/getUpdates
          </p>
        </div>
        <button
          onClick={testNotification}
          disabled={isLoading || (!settings.telegram_bot_token && !settings.email_settings.enabled)}
          style={{
            padding: '0.5rem 1rem',
            backgroundColor: (settings.telegram_bot_token || settings.email_settings.enabled) ? '#3b82f6' : '#9ca3af',
            color: 'white',
            border: 'none',
            borderRadius: '0.375rem',
            cursor: (settings.telegram_bot_token || settings.email_settings.enabled) ? 'pointer' : 'not-allowed',
            marginRight: '0.5rem'
          }}
        >
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        </button>
      </div>

      {/* Email Settings */}
      <div style={{ backgroundColor: 'white', padding: '2rem', borderRadius: '0.5rem', border: '1px solid #e5e7eb', marginBottom: '1rem' }}>
        <h2 style={{ marginBottom: '1rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
          <Mail size={20} />
          Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        </h2>
        
        <div style={{ marginBottom: '1rem' }}>
          <label style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem' }}>
            <input
              type="checkbox"
              checked={settings.email_settings.enabled}
              onChange={(e) => setSettings(prev => ({
                ...prev,
                email_settings: { ...prev.email_settings, enabled: e.target.checked }
              }))}
            />
            –í–∫–ª—é—á–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </label>
        </div>

        {settings.email_settings.enabled && (
          <>
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem', marginBottom: '1rem' }}>
              <div>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                  SMTP —Å–µ—Ä–≤–µ—Ä:
                </label>
                <input
                  type="text"
                  value={settings.email_settings.smtp_host}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    email_settings: { ...prev.email_settings, smtp_host: e.target.value }
                  }))}
                  placeholder="smtp.gmail.com"
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.375rem',
                    fontSize: '0.875rem'
                  }}
                />
              </div>
              <div>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                  –ü–æ—Ä—Ç:
                </label>
                <input
                  type="number"
                  value={settings.email_settings.smtp_port}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    email_settings: { ...prev.email_settings, smtp_port: parseInt(e.target.value) || 587 }
                  }))}
                  placeholder="587"
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.375rem',
                    fontSize: '0.875rem'
                  }}
                />
              </div>
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem', marginBottom: '1rem' }}>
              <div>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                  –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
                </label>
                <input
                  type="text"
                  value={settings.email_settings.username}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    email_settings: { ...prev.email_settings, username: e.target.value }
                  }))}
                  placeholder="your-email@gmail.com"
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.375rem',
                    fontSize: '0.875rem'
                  }}
                />
              </div>
              <div>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                  –ü–∞—Ä–æ–ª—å:
                </label>
                <input
                  type="password"
                  value={settings.email_settings.password}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    email_settings: { ...prev.email_settings, password: e.target.value }
                  }))}
                  placeholder="–í–∞—à –ø–∞—Ä–æ–ª—å –∏–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.375rem',
                    fontSize: '0.875rem'
                  }}
                />
              </div>
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem', marginBottom: '1rem' }}>
              <div>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                  Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:
                </label>
                <input
                  type="email"
                  value={settings.email_settings.from_email}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    email_settings: { ...prev.email_settings, from_email: e.target.value }
                  }))}
                  placeholder="noreply@yourdomain.com"
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.375rem',
                    fontSize: '0.875rem'
                  }}
                />
              </div>
              <div>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                  –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:
                </label>
                <input
                  type="text"
                  value={settings.email_settings.from_name}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    email_settings: { ...prev.email_settings, from_name: e.target.value }
                  }))}
                  placeholder="–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.375rem',
                    fontSize: '0.875rem'
                  }}
                />
              </div>
            </div>

            <div style={{ marginBottom: '1rem' }}>
              <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                Email –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:
              </label>
              <input
                type="text"
                value={settings.email_settings.to_emails}
                onChange={(e) => setSettings(prev => ({
                  ...prev,
                  email_settings: { ...prev.email_settings, to_emails: e.target.value }
                }))}
                placeholder="admin@example.com, support@example.com"
                style={{
                  width: '100%',
                  padding: '0.75rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.375rem',
                  fontSize: '0.875rem'
                }}
              />
              <p style={{ fontSize: '0.75rem', color: '#6b7280', marginTop: '0.5rem' }}>
                –£–∫–∞–∂–∏—Ç–µ email –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
              </p>
            </div>

            <div style={{ display: 'flex', gap: '1rem', marginBottom: '1rem' }}>
              <label style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                <input
                  type="checkbox"
                  checked={settings.email_settings.use_tls}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    email_settings: { ...prev.email_settings, use_tls: e.target.checked }
                  }))}
                />
                –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TLS
              </label>
              <label style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                <input
                  type="checkbox"
                  checked={settings.email_settings.use_start_tls}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    email_settings: { ...prev.email_settings, use_start_tls: e.target.checked }
                  }))}
                />
                –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å STARTTLS
              </label>
            </div>

            <div style={{ padding: '1rem', backgroundColor: '#f3f4f6', borderRadius: '0.375rem', marginBottom: '1rem' }}>
              <h4 style={{ margin: '0 0 0.5rem 0', fontSize: '0.875rem', fontWeight: '600' }}>–ü—Ä–∏–º–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:</h4>
              <div style={{ fontSize: '0.75rem', color: '#6b7280' }}>
                <p><strong>Gmail:</strong> smtp.gmail.com:587, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –ø–∞—Ä–æ–ª—è</p>
                <p><strong>Yandex:</strong> smtp.yandex.ru:465, –≤–∫–ª—é—á–∏—Ç–µ TLS</p>
                <p><strong>Mail.ru:</strong> smtp.mail.ru:465, –≤–∫–ª—é—á–∏—Ç–µ TLS</p>
                <p><strong>Outlook:</strong> smtp-mail.outlook.com:587, –≤–∫–ª—é—á–∏—Ç–µ STARTTLS</p>
              </div>
            </div>
          </>
        )}
      </div>

      {/* Notification Types */}
      <div style={{ backgroundColor: 'white', padding: '2rem', borderRadius: '0.5rem', border: '1px solid #e5e7eb', marginBottom: '1rem' }}>
        <h2 style={{ marginBottom: '1rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
          <AlertTriangle size={20} />
          –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        </h2>

        {/* Agent Offline */}
        <div style={{ marginBottom: '2rem', padding: '1rem', border: '1px solid #e5e7eb', borderRadius: '0.375rem' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem' }}>
            <Server size={16} />
            <h3 style={{ margin: 0, fontWeight: '600' }}>–ê–≥–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç</h3>
            <label style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
              <input
                type="checkbox"
                checked={settings.notifications?.agent_offline?.enabled ?? false}
                onChange={(e) => updateNotification('agent_offline', 'enabled', e.target.checked)}
              />
              –í–∫–ª—é—á–µ–Ω–æ
            </label>
          </div>
          <div>
            <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
              –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
            </label>
            <textarea
              value={settings.notifications?.agent_offline?.message || ''}
              onChange={(e) => updateNotification('agent_offline', 'message', e.target.value)}
              style={{
                width: '100%',
                padding: '0.75rem',
                border: '1px solid #d1d5db',
                borderRadius: '0.375rem',
                fontSize: '0.875rem',
                minHeight: '80px',
                resize: 'vertical'
              }}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            />
            <p style={{ fontSize: '0.75rem', color: '#6b7280', marginTop: '0.5rem' }}>
              –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {'{AGENT_NAME}'}
            </p>
          </div>
        </div>

        {/* Container Stopped */}
        <div style={{ marginBottom: '2rem', padding: '1rem', border: '1px solid #e5e7eb', borderRadius: '0.375rem' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem' }}>
            <Container size={16} />
            <h3 style={{ margin: 0, fontWeight: '600' }}>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è</h3>
            <label style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
              <input
                type="checkbox"
                checked={settings.notifications?.container_stopped?.enabled ?? false}
                onChange={(e) => updateNotification('container_stopped', 'enabled', e.target.checked)}
              />
              –í–∫–ª—é—á–µ–Ω–æ
            </label>
          </div>
          <div>
            <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
              –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
            </label>
            <textarea
              value={settings.notifications?.container_stopped?.message || ''}
              onChange={(e) => updateNotification('container_stopped', 'message', e.target.value)}
              style={{
                width: '100%',
                padding: '0.75rem',
                border: '1px solid #d1d5db',
                borderRadius: '0.375rem',
                fontSize: '0.875rem',
                minHeight: '80px',
                resize: 'vertical'
              }}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            />
            <p style={{ fontSize: '0.75rem', color: '#6b7280', marginTop: '0.5rem' }}>
              –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {'{CONTAINER_NAME}'}, {'{AGENT_NAME}'}
            </p>
          </div>
        </div>

        {/* CPU Threshold */}
        <div style={{ marginBottom: '2rem', padding: '1rem', border: '1px solid #e5e7eb', borderRadius: '0.375rem' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem' }}>
            <Cpu size={16} />
            <h3 style={{ margin: 0, fontWeight: '600' }}>CPU &gt; N %</h3>
            <label style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
              <input
                type="checkbox"
                checked={settings.notifications?.cpu_threshold?.enabled ?? false}
                onChange={(e) => updateNotification('cpu_threshold', 'enabled', e.target.checked)}
              />
              –í–∫–ª—é—á–µ–Ω–æ
            </label>
          </div>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 2fr', gap: '1rem', marginBottom: '1rem' }}>
            <div>
              <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                –ü–æ—Ä–æ–≥ CPU (%):
              </label>
              <input
                type="number"
                value={settings.notifications?.cpu_threshold?.threshold ?? 80}
                onChange={(e) => updateNotification('cpu_threshold', 'threshold', parseInt(e.target.value) || 0)}
                min="1"
                max="100"
                style={{
                  width: '100%',
                  padding: '0.75rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.375rem',
                  fontSize: '0.875rem'
                }}
              />
            </div>
          </div>
          <div>
            <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
              –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
            </label>
            <textarea
              value={settings.notifications?.cpu_threshold?.message || ''}
              onChange={(e) => updateNotification('cpu_threshold', 'message', e.target.value)}
              style={{
                width: '100%',
                padding: '0.75rem',
                border: '1px solid #d1d5db',
                borderRadius: '0.375rem',
                fontSize: '0.875rem',
                minHeight: '80px',
                resize: 'vertical'
              }}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            />
            <p style={{ fontSize: '0.75rem', color: '#6b7280', marginTop: '0.5rem' }}>
              –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {'{AGENT_NAME}'}, {'{CPU_USAGE}'}
            </p>
          </div>
        </div>

        {/* RAM Threshold */}
        <div style={{ marginBottom: '2rem', padding: '1rem', border: '1px solid #e5e7eb', borderRadius: '0.375rem' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem' }}>
            <HardDrive size={16} />
            <h3 style={{ margin: 0, fontWeight: '600' }}>RAM &gt; M %</h3>
            <label style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
              <input
                type="checkbox"
                checked={settings.notifications?.ram_threshold?.enabled ?? false}
                onChange={(e) => updateNotification('ram_threshold', 'enabled', e.target.checked)}
              />
              –í–∫–ª—é—á–µ–Ω–æ
            </label>
          </div>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 2fr', gap: '1rem', marginBottom: '1rem' }}>
            <div>
              <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                –ü–æ—Ä–æ–≥ RAM (%):
              </label>
              <input
                type="number"
                value={settings.notifications?.ram_threshold?.threshold ?? 80}
                onChange={(e) => updateNotification('ram_threshold', 'threshold', parseInt(e.target.value) || 0)}
                min="1"
                max="100"
                style={{
                  width: '100%',
                  padding: '0.75rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.375rem',
                  fontSize: '0.875rem'
                }}
              />
            </div>
          </div>
          <div>
            <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
              –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
            </label>
            <textarea
              value={settings.notifications?.ram_threshold?.message || ''}
              onChange={(e) => updateNotification('ram_threshold', 'message', e.target.value)}
              style={{
                width: '100%',
                padding: '0.75rem',
                border: '1px solid #d1d5db',
                borderRadius: '0.375rem',
                fontSize: '0.875rem',
                minHeight: '80px',
                resize: 'vertical'
              }}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            />
            <p style={{ fontSize: '0.75rem', color: '#6b7280', marginTop: '0.5rem' }}>
              –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {'{AGENT_NAME}'}, {'{RAM_USAGE}'}
            </p>
          </div>
        </div>
      </div>

      {/* Save Button */}
      <div style={{ textAlign: 'right' }}>
        <button
          onClick={saveSettings}
          disabled={isLoading}
          style={{
            padding: '0.75rem 1.5rem',
            backgroundColor: isLoading ? '#9ca3af' : '#3b82f6',
            color: 'white',
            border: 'none',
            borderRadius: '0.375rem',
            cursor: isLoading ? 'not-allowed' : 'pointer',
            fontSize: '0.875rem',
            fontWeight: '500'
          }}
        >
          {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
        </button>
      </div>
    </div>
  )
} 